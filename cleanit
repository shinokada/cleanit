#!/usr/bin/env bash

########################
# Author: Shinichi Okada
# Date: 2021-05-31
###########################

script_name=$(basename "$0")
version="0.1.2"
script_dir=""

usage() {
    cat <<EOF
Name: $script_name
Description: This script moves files older than 20 days from a directory (default ~/Downloads) to another directory (default ~/.Trash).

Usage:  $script_name [ -f ] [ -d ] [ -t ][ -h ][ -v ]
    -f target-directory (~/Download as default) 
    -d (Default is 20) Set days to indicate the maximum days to keep files. 
    -t (default is ~/.Trash) Set the directory where you want files to move to. 
    -c Set a cron job
    -r Remove a cron job
    -h Show help
    -v Show version

Examples:  
    Move files older than 20 days in ~/Downloads to ~/.Trash
    $script_name

    $script_name -f ~/Mydir

    Move files older than 10 days in ~/Mydir to ~/.Trash
    $script_name -d 10 -f ~/Mydir

    Move files older than 5 days in ~/Mydir to ~/Anotherdir
    $script_name -f ~/Mydir -d 5 -t ~/Anotherdir

    Clean up Trash
    $script_name -f trash

    Set a cron job to remove files that are older than 30 days at 13:30 everyday.
    $script_name -c -d 30 -o 13 -m 30

EOF
}

fn_check_trash_access() {
    if [[ ! -r $HOME/.Trash ]]; then
        echo "Give the Terminal.app Full Disk permission in the security settings. See the README."
        exit 1
    fi
}

move_to_trash() {
    find "$FROM_DIR" -mtime +"$DAYS" -exec mv {} "$TO_DIR" \; 2>/dev/null
    return 0
}

remove_from_trash() {
    local trash=$HOME/.Trash

    # remove files
    find "$trash" -mtime +"$DAYS" -exec rm -rf {} \; 2>/dev/null
    # remove direcotries
    find "$trash"/* -type d -mtime +"$DAYS" -exec rm -rf {} \; 2>/dev/null
    return 0
}

fn_num() {
    local from_dir=${1}
    local days=${2}
    # echo $from_dir
    # echo $days
    echo $(find "${from_dir}" -mtime +"${days}" | wc -l | xargs)
}

fn_script_dir() {
    which_install=$(which "${script_name}")

    if [[ -L $which_install ]]; then
        # check if installation is Homebrew
        # if so use script_dir=/opt/homebrew/Cellar/backpack_install/${version}/bin
        if [[ "$which_install" == *"homebrew"* ]]; then
            script_dir="/opt/homebrew/Cellar/"${script_name}"/${version}/bin"
        else
            link=$(readlink ${which_install})
            script_dir=$(dirname ${link})
        fi
    else
        script_dir="./"
    fi
    echo $script_dir
}

script_dir=$(fn_script_dir)
# echo "echo from script_dir: ${script_dir}"

fn_cron() {
    local plist_name="local.cleanit.plist"
    local plist_path="$HOME/Library/LaunchAgents"
    local launchd_name="cleanit-launchd"
    local launchd_path="$HOME/.cleanit/"
    local launchd_file="${launchd_path}${launchd_name}"
    # local crondays=30
    local username=$(whoami)
    local days=${1}
    local minute=${2}
    local hour=${3}
    local cleanitpath=$(which $script_name)
    local notifierpath=$(which terminal-notifier)
    # echo ${pathtocleanit}
    # exit
    # echo $days
    # create a directory LaunchAgents and plist and save it to "${plist_path}/${plist_name}"
    # echo $plist_path
    if [[ -d "${plist_path}" ]]; then
        # echo "cron 1a"
        echo "Creating a dir and a file, ${plist_path}/${plist_name}"
        touch "${plist_path}/${plist_name}"
        echo "A plist created."
    else
        echo "Creating ${plist_path}/${plist_name}"
        mkdir -p "${plist_path}" && touch "${plist_path}/${plist_name}"
    fi
    sed "s/changeusername/${username}/;s/changehour/${hour}/;s/changeminute/${minute}/" "${script_dir}/${plist_name}" >"${plist_path}/${plist_name}" || exit 1
    if [[ ! -d "$HOME/.cleanit" ]]; then
        mkdir "$HOME/.cleanit"
    fi
    # touch /$HOME/.cleanit/cleanit-launchd
    touch "${launchd_file}"
    # replace $days in cleanit-launchd and write to the file
    # since path has /, use # in sed changenotifierpath
    sed "s/changedays/${days}/;s/changeusername/${username}/g;s#changecleanitpath#${cleanitpath}#;s#changenotifierpath#${notifierpath}#" "${script_dir}/${launchd_name}" >"${launchd_file}" || exit 1
    echo "Cron is set everyday at ${HOUR}:${MINUTE}."
    # make the executable
    chmod +x "${launchd_file}"
    # unload the job
    launchctl unload "${plist_path}/${plist_name}" || exit
    # load the job
    launchctl load "${plist_path}/${plist_name}" || exit
    launchctl list | grep "$plist_name"
    exit
}

####################################
# Main script

unset FROM_DIR TO_DIR DAYS

FROM_DIR=$HOME/Downloads
TO_DIR=$HOME/.Trash
DAYS=20
CRON="false"

# No parameter
if [[ $# = 0 ]]; then
    NUM=$(fn_num $FROM_DIR $DAYS)
    move_to_trash
    echo "Moved ${NUM} files older than ${DAYS} days in the $(basename ${FROM_DIR}) to $(basename ${TO_DIR})."
    exit 0
fi

while (($# > 0)); do
    case $1 in
    -f | --from)
        FROM_DIR="${2}"
        shift 2
        ;;
    -d | --days)
        DAYS="${2}"
        shift 2
        ;;
    -t | -to_dir)
        TO_DIR="${2}"
        shift 2
        ;;
    -r | --remove)
        REMOVE="true"
        shift 1
        ;;
    -c | --cron)
        CRON="true"
        shift 1
        ;;
    -o | --hour)
        HOUR=${2}
        shift 2
        ;;
    -m | --minute)
        MINUTE=${2}
        shift 2
        ;;
    -v | --version)
        echo $version
        exit
        ;;
    -h | --help)
        usage
        exit
        ;;
    esac
done

[ -z "$FROM_DIR" ] || [ -z "$DAYS" ] || [ -z "$TO_DIR" ] && usage

if [[ "$FROM_DIR" =~ "trash" ]]; then
    fn_check_trash_access
    NUM=$(fn_num $HOME/.Trash $DAYS)
    # NUM=$(find "$HOME"/.Trash -mtime +"$DAYS" | wc -l | xargs)
elif [[ -d $FROM_DIR ]]; then
    NUM=$(fn_num $FROM_DIR $DAYS)
    # NUM=$(find "$FROM_DIR" -mtime +"$DAYS" | wc -l | xargs)
else
    echo "No such directory: $FROM_DIR"
    exit 2
fi

if [[ $DAYS -lt 0 ]]; then
    echo "Days must be greater then 0."
    exit 1
fi

if [[ ${REMOVE} = "true" ]]; then
    launchctl unload "$HOME/Library/LaunchAgents/local.cleanit.plist"
    exit
fi

if [[ ${CRON} = "true" ]]; then
    if [[ (! -z "$MINUTE") && (! -z "$HOUR") ]]; then
        fn_cron ${DAYS} ${MINUTE} ${HOUR}
    else
        echo "You must provide -o hour and -m minute."
        exit 1
    fi
fi

if [[ $NUM -gt 0 ]]; then
    # matches patterns in a case-insensitive
    shopt -s nocasematch
    if [[ "$FROM_DIR" =~ "trash" ]]; then
        # remove files from Trash permanently
        remove_from_trash || {
            echo "Can't remove from the directory, exiting script!"
            exit 1
        }
        echo "Removed $NUM files older than $DAYS days from ~/.Trash."
        exit 0
    else
        # move files to Trash
        move_to_trash || {
            echo "Can't move to trash, exiting script!"
            exit 1
        }
        echo "Hi, Moved $NUM files older than $DAYS days in the $(basename $FROM_DIR) to $(basename $TO_DIR)."
        exit 0
    fi
else
    echo "No files older than $DAYS days in $FROM_DIR."
    exit 0
fi

exit 0
