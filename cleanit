#!/usr/bin/env bash

########################
# Author: Shinichi Okada
# Date: 2021-05-30
###########################

script_name=$(basename "$0")
version="0.3.3"
script_dir=""
downloads_dir=$HOME/Downloads
trash_dir=$HOME/.Trash

myrealpath() {
    local LINK REALPATH
    local OURPWD=$PWD
    cd "$(dirname "$1")" || exit
    LINK=$(readlink "$(basename "$1")")
    while [ "$LINK" ]; do
        cd "$(dirname "$LINK")" || exit
        LINK=$(readlink "$(basename "$1")")
    done
    REALPATH="$PWD/$(basename "$1")"
    cd "$OURPWD" || exit
    echo "$REALPATH"
}

usage() {
    cat <<EOF
Name: $script_name
Description: This script moves files older than 20 days from a directory (default: ~/Downloads) to another directory (default: ~/.Trash).

Usage:

$script_name [-f <dir>][-t <dir>][-D <number>] 
$script_name cron -H <hour> -M <minute> [-D <number>]
$script_name -r

Options: 

    -f  target-directory [default: ~/Download]
    -t  Set the directory where you want files to move to. [default: ~/.Trash]
    -r  Remove a cronjob
    -D  Set days to indicate the maximum days to keep files. [default: 20]
    -H  Set the hour to a cronjob
    -M  Set the min to a cronjob
    -h Show help
    -v Show version

Examples:  
    Move files older than 20 days in ~/Downloads to ~/.Trash
    $script_name

    Move files older than 10 days in ~/Mydir to ~/.Trash
    $script_name -D 10 -f ~/Mydir

    Move files older than 5 days in ~/Mydir to ~/Anotherdir
    $script_name -f ~/Mydir -D 5 -t ~/Anotherdir

    Clean up Trash
    $script_name -f trash

    Set a cron job to remove files that are older than 30 days at 13:30 everyday.
    $script_name cron -D 30 -H 13 -M 30

    Remove a cronjob
    $script_name -r

EOF
}

fn_check_cmd() {
    if [[ ! $(command -v "$1") ]]; then
        echo "It seems like you don't have $1." >&2
        echo "Please install $1 by running brew install $1" >&2
        exit 1
    fi
}

fn_find_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        OS="linux"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        OS="macos"
    fi
    echo $OS
}

fn_check_trash_access() {
    if [[ ! -r $HOME/.Trash ]]; then
        echo "Give the Terminal.app Full Disk permission in the security settings. See the README." >&2
        exit 1
    fi
}

move_to_trash() {
    find "$FROM_DIR" -mtime +"$DAYS" -exec mv {} "$TO_DIR" \; 2>/dev/null
    return 0
}

remove_from_trash() {
    local trash=$HOME/.Trash

    # remove files
    find "$trash" -mtime +"$DAYS" -exec rm -rf {} \; 2>/dev/null
    # remove direcotries
    find "$trash"/* -type d -mtime +"$DAYS" -exec rm -rf {} \; 2>/dev/null
    return 0
}

fn_num() {
    local from_dir=${1}
    local days=${2}
    find "${from_dir}" -mtime +"${days}" | wc -l | xargs
}

# from awesome script
if [[ -z $(which "$0") ]]; then
    script_dir=$(myrealpath "$0")
else
    script_dir=$(myrealpath "$(which "${script_name}")")
    script_dir=${script_dir%/*}
fi

remove_from() {
    NUM=$(fn_num "$FROM_DIR" "$DAYS")
    from=$1
    if [ "$1" = "$trash_dir" ]; then
        echo "Checking Trash access ..."
        fn_check_trash_access
    fi
    echo "Removing files/dirs ..."
    # remove files
    find "$from" -mtime +"$DAYS" -exec rm -rf {} \; 2>/dev/null
    # remove direcotries
    find "$from"/* -type d -mtime +"$DAYS" -exec rm -rf {} \; 2>/dev/null
    echo "Removed $NUM files older than $DAYS days from $from"
}
# script_dir=$(fn_script_dir)

fn_cron() {
    local plist_name
    plist_name="local.cleanit.plist"
    local plist_path
    plist_path="$HOME/Library/LaunchAgents"
    local launchd_name
    launchd_name="cleanit-launchd"
    local launchd_path
    launchd_path="$HOME/.cleanit/"
    local launchd_file
    launchd_file="${launchd_path}${launchd_name}"
    # local crondays=30
    local username
    username=$(whoami)
    local days=${1}
    local minute=${2}
    local hour=${3}
    local cleanitpath
    cleanitpath=$(which "$script_name")
    local notifierpath
    notifierpath=$(which terminal-notifier)

    # create a directory LaunchAgents and plist and save it to "${plist_path}/${plist_name}"
    if [[ -d "${plist_path}" ]]; then
        # echo "cron 1a"
        echo "Creating a dir and a file, ${plist_path}/${plist_name}"
        touch "${plist_path}/${plist_name}"
        echo "A plist created."
    else
        echo "Creating ${plist_path}/${plist_name}"
        mkdir -p "${plist_path}" && touch "${plist_path}/${plist_name}"
    fi

    sed "s/changeusername/${username}/;s/changehour/${hour}/;s/changeminute/${minute}/" "${script_dir}/${plist_name}" >"${plist_path}/${plist_name}" || exit 1
    # launchd
    # mkdir -p ~/.cleanit
    # check ~/.cleanit dir
    if [[ ! -d "$HOME/.cleanit" ]]; then
        mkdir "$HOME/.cleanit"
    fi
    # touch /$HOME/.cleanit/cleanit-launchd
    touch "${launchd_file}"
    # replace $days in cleanit-launchd and write to the file
    # since path has /, use # in sed changenotifierpath
    sed "s/changedays/${days}/;s/changeusername/${username}/g;s#changecleanitpath#${cleanitpath}#;s#changenotifierpath#${notifierpath}#" "${script_dir}/${launchd_name}" >"${launchd_file}" || exit 1
    # make the executable
    chmod +x "${launchd_file}"
    # if plist exist, unload it first
    if [[ -e "${plist_path}/${plist_name}" ]]; then
        # unload the job
        launchctl unload -w "${plist_path}/${plist_name}" >&/dev/null || exit 1
    fi
    # load the job
    launchctl load -w "${plist_path}/${plist_name}" >&/dev/null || exit 1
    echo "Cron is set everyday at ${HOUR}:${MINUTE}."
    launchctl list | grep "$plist_name"
    exit
}

fn_remove_cron() {
    local plist_name
    plist_name="local.cleanit.plist"
    local plist_path
    plist_path="$HOME/Library/LaunchAgents"
    echo "Removing ${plist_path}/${plist_name} ..."
    if [[ -e "${plist_path}/${plist_name}" ]]; then
        launchctl unload -w "${plist_path}/${plist_name}" >&/dev/null || exit 1
    fi
    echo "Removed the file."
    exit
}

####################################
# Main script

unset FROM_DIR TO_DIR DAYS

# if OS is macOS
if [[ $(fn_find_os) = "macos" ]]; then
    FROM_DIR=$HOME/Downloads
    TO_DIR=$HOME/.Trash
else
    # for Linux make them empty
    FROM_DIR=""
    TO_DIR=""
fi
DAYS=20
CRON="false"

# check commands
fn_check_cmd link
fn_check_cmd terminal-notifier
fn_check_cmd bash
# fn_check_realpath

# No parameter
if [[ $# = 0 ]]; then
    NUM=$(fn_num "$FROM_DIR" "$DAYS")
    move_to_trash
    echo "Moved ${NUM} files older than ${DAYS} days in the $(basename "${FROM_DIR}") to $(basename "${TO_DIR}")."
    exit 0
fi

while (($# > 0)); do
    case $1 in
    -f | --from)
        FROM_DIR="${2}"
        shift 2
        ;;
    -D | --days)
        DAYS="${2}"
        shift 2
        ;;
    -t | -to_dir)
        TO_DIR="${2}"
        shift 2
        ;;
    cron)
        CRON="true"
        shift
        ;;
    downloads)
        remove_from "$downloads_dir"
        shift
        ;;
    trash)
        remove_from "$trash_dir"
        shift
        ;;
    -r | --remove)
        fn_remove_cron
        shift
        ;;
    -H | --hour)
        HOUR=${2}
        shift 2
        ;;
    -M | --minute)
        MINUTE=${2}
        shift 2
        ;;
    -v | --version)
        echo $version
        exit
        ;;
    -h | --help)
        usage
        exit
        ;;
    esac
done

# if OS is Linux then it must provide -t and -f
[ -z "$FROM_DIR" ] || [ -z "$DAYS" ] || [ -z "$TO_DIR" ] && echo "You must be using Linux. Please provide -t and -f" && usage

# Ubuntu has trash at /home/username/.local/share/Trash
if [[ "$FROM_DIR" =~ "trash" ]]; then
    fn_check_trash_access
    NUM=$(fn_num "$HOME"/.Trash "$DAYS")
    # NUM=$(find "$HOME"/.Trash -mtime +"$DAYS" | wc -l | xargs)
elif [[ -d $FROM_DIR ]]; then
    NUM=$(fn_num "$FROM_DIR" "$DAYS")
    # NUM=$(find "$FROM_DIR" -mtime +"$DAYS" | wc -l | xargs)
else
    echo "No such directory: $FROM_DIR" >&2
    exit 2
fi

if [[ $DAYS -lt 0 ]]; then
    echo "Days must be greater then 0." >&2
    exit 1
fi

if [[ ${CRON} = "true" ]]; then
    if [[ (-n "$MINUTE") && (-n "$HOUR") ]]; then
        fn_cron "${DAYS}" "${MINUTE}" "${HOUR}"
    else
        echo "You must provide -o hour and -m minute." >&2
        exit 1
    fi
fi

if [[ $NUM -gt 0 ]]; then
    # matches patterns in a case-insensitive
    shopt -s nocasematch
    if [[ "$FROM_DIR" =~ "trash" ]]; then
        # remove files from Trash permanently
        remove_from_trash || {
            echo "Can't remove from the directory, exiting script!" >&2
            exit 1
        }
        echo "Removed $NUM files older than $DAYS days from ~/.Trash."
        exit 0
    else
        # move files to Trash
        move_to_trash || {
            echo "Can't move to trash, exiting script!" >&2
            exit 1
        }
        echo "Hi, Moved $NUM files older than $DAYS days in the $(basename "$FROM_DIR") to $(basename "$TO_DIR")."
        exit 0
    fi
else
    echo "No files older than $DAYS days in $FROM_DIR."
    exit 0
fi

exit 0
