#!/usr/bin/env bash

########################
# Author: Shinichi Okada
# Date: 2021-08-22
# Update: 2022-03-25
###########################

script_name=$(basename "$0")
version="0.4.4"
script_dir=""
downloads_dir=$HOME/Downloads
trash_dir=$HOME/.Trash

readlinkf() {
    [ "${1:-}" ] || return 1
    max_symlinks=40
    CDPATH='' # to avoid changing to an unexpected directory

    target=$1
    [ -e "${target%/}" ] || target=${1%"${1##*[!/]}"} # trim trailing slashes
    [ -d "${target:-/}" ] && target="$target/"

    cd -P . 2>/dev/null || return 1
    while [ "$max_symlinks" -ge 0 ] && max_symlinks=$((max_symlinks - 1)); do
        if [ ! "$target" = "${target%/*}" ]; then
            case $target in
            /*) cd -P "${target%/*}/" 2>/dev/null || break ;;
            *) cd -P "./${target%/*}" 2>/dev/null || break ;;
            esac
            target=${target##*/}
        fi

        if [ ! -L "$target" ]; then
            target="${PWD%/}${target:+/}${target}"
            printf '%s\n' "${target:-/}"
            return 0
        fi
        link=$(ls -dl -- "$target" 2>/dev/null) || break
        target=${link#*" $target -> "}
    done
    return 1
}

self=$(readlinkf "$0")
script_dir=${self%/*}

usage() {
    cat <<EOF
Name: $script_name
Description: This script moves files older than 20 days from a directory (default: ~/Downloads) to another directory (default: ~/.Trash).

Usage:

$script_name [-f <dir>][-t <dir>][-D <number>] 
$script_name cron -H <hour> -M <minute> [-D <number>]
$script_name [-D <number>] downloads
$script_name [-D <number>] trash
$script_name -r

Options: 

    -f  target-directory [default: ~/Download]
    -t  Set the directory where you want files to move to. [default: ~/.Trash]
    -r  Remove a cronjob
    -D  Set days to indicate the maximum days to keep files. [default: 20]
    -H  Set the hour to a cronjob
    -M  Set the min to a cronjob
    -h Show help
    -v Show version

Examples:  
    Move files older than 20 days in ~/Downloads to ~/.Trash
    $script_name

    Move files older than 10 days in ~/Mydir to ~/.Trash
    $script_name -D 10 -f ~/Mydir

    Move files older than 5 days in ~/Mydir to ~/Anotherdir
    $script_name -f ~/Mydir -D 5 -t ~/Anotherdir

    Clean up Downloads
    $script_name downloads
    or
    $script_name -f downloads

    Clean up Trash
    $script_name trash
    or
    $script_name -f trash

    Set a cron job to remove files that are older than 30 days at 13:30 everyday.
    $script_name cron -H 13 -M 30 -D 30

    Remove a cronjob
    $script_name -r

EOF
}

fn_check_cmd() {
    if [ ! "$(command -v "$1")" ]; then
        echo "It seems like you don't have $1." >&2
        echo "Please install $1 by running brew install $1" >&2
        exit 1
    fi
}

fn_find_os() {
    case $(uname -s) in
    [Ll][Ii][Nn][Uu][Xx])
        OS="linux"
        ;;
    [Dd][Aa][Rr][Ww][Ii][Nn])
        OS="macos"
        ;;
    esac
    # if [ "$OSTYPE" == "linux-gnu"* ]; then
    #     OS="linux"
    # elif [[ "$OSTYPE" == "darwin"* ]]; then
    #     OS="macos"
    # fi
    echo $OS
}

fn_check_trash_access() {
    # echo "Checking the full access..."
    # test -r "$HOME"/.Trash
    # echo $?
    if [ ! -r "$HOME"/.Trash ]; then
        echo "Give the Terminal.app Full Disk permission in the security settings. See the README." >&2
        exit 1
    fi
}

fn_check_trash_access

move_to_trash() {
    find "$FROM_DIR" -mtime +"$DAYS" -exec mv {} "$TO_DIR" \; 2>/dev/null
    return 0
}

fn_num() {
    from_dir=${1}
    days=${2}
    find "${from_dir}" -mtime +"${days}" | wc -l | xargs
}

remove_from_trash() {
    NUM=$(fn_num "$trash_dir" "$DAYS")
    if [ "$NUM" -gt 0 ]; then
        # echo "Removing files/dirs ..."
        # remove files

        find "$trash_dir" -mtime +"$DAYS" -exec rm -rf {} \; 2>/dev/null || {
            echo "No files to clean."
            exit 0
        }
        # remove direcotries
        find "$trash_dir" -type d -mtime +"$DAYS" -exec rm -rf {} \; 2>/dev/null || {
            echo "No directories to clean."
            exit 0
        }
        echo "Removed $NUM files older than $DAYS days from ~/.Trash."
    else
        echo "Nothing to remove."
    fi
    exit
}

remove_from_downloads() {
    NUM=$(fn_num "$downloads_dir" "$DAYS")
    if [ "$NUM" -gt 0 ]; then
        # echo "Removing files/dirs ..."
        move_to_trash
        echo "Removed $NUM files older than $DAYS days from Downloads."
    else
        echo "Nothing to remove."
    fi
}

fn_cron() {
    plist_name="local.cleanit.plist"
    plist_path="$HOME/Library/LaunchAgents"
    launchd_name="cleanit-launchd"
    launchd_path="$HOME/.cleanit/"
    launchd_file="${launchd_path}${launchd_name}"
    # local crondays=30
    username=$(whoami)
    days=${1}
    minute=${2}
    hour=${3}
    cleanitpath=$(which "$script_name")
    # cleanit path for $PATH
    cleanitdir_path=":${cleanitpath%/*}"
    # echo "$cleanitdir_path"
    # exit
    notifierpath=$(which terminal-notifier)

    # create a directory LaunchAgents and plist and save it to "${plist_path}/${plist_name}"
    if [ -d "${plist_path}" ]; then
        echo "Creating ${plist_path}/${plist_name}"
        mkdir -p "${plist_path}" && touch "${plist_path}/${plist_name}"
    else
        # echo "cron 1a"
        echo "Creating a dir and a file, ${plist_path}/${plist_name}"
        touch "${plist_path}/${plist_name}"
        echo "A plist created."
    fi
    # using + for sed path replacement
    sed "s+changecleanit_dir+${cleanitdir_path}+;s/changeusername/${username}/;s/changehour/${hour}/;s/changeminute/${minute}/" "${script_dir}/utils/${plist_name}" >"${plist_path}/${plist_name}" || exit 1
    # launchd
    # mkdir -p ~/.cleanit
    # check ~/.cleanit dir
    if [ ! -d "$HOME/.cleanit" ]; then
        mkdir "$HOME/.cleanit"
    fi
    # touch /$HOME/.cleanit/cleanit-launchd
    touch "${launchd_file}"
    # replace $days in cleanit-launchd and write to the file
    # since path has /, use # in sed changenotifierpath
    sed "s/changedays/${days}/;s/changeusername/${username}/g;s#changecleanitpath#${cleanitpath}#;s#changenotifierpath#${notifierpath}#" "${script_dir}/utils/${launchd_name}" >"${launchd_file}" || exit 1
    # make the executable
    chmod +x "${launchd_file}"
    # if plist exist, unload it first
    if [ -e "${plist_path}/${plist_name}" ]; then
        # unload the job
        launchctl unload -w "${plist_path}/${plist_name}" >/dev/null 2>&1 || exit 1
    fi
    # load the job
    launchctl load -w "${plist_path}/${plist_name}" >/dev/null 2>&1 || exit 1
    echo "Cron is set everyday at ${HOUR}:${MINUTE}."
    launchctl list | grep "$plist_name"
    exit
}

fn_remove_cron() {
    plist_name="local.cleanit.plist"
    plist_path="$HOME/Library/LaunchAgents"
    echo "Removing ${plist_path}/${plist_name} ..."
    if [ -e "${plist_path}/${plist_name}" ]; then
        launchctl unload -w "${plist_path}/${plist_name}" >/dev/null 2>&1 || exit 1
    fi
    echo "Removed the file."
    exit
}

####################################
# Main script

unset FROM_DIR TO_DIR DAYS

# if OS is macOS
if [ "$(fn_find_os)" = "macos" ]; then
    FROM_DIR=$HOME/Downloads
    TO_DIR=$HOME/.Trash
else
    # for Linux make them empty
    FROM_DIR=""
    TO_DIR=""
fi
DAYS=20
CRON="false"

# check commands
fn_check_cmd link
fn_check_cmd terminal-notifier
fn_check_cmd bash
# fn_check_realpath

# No parameter
if [ $# = 0 ]; then
    NUM=$(fn_num "$FROM_DIR" "$DAYS")
    move_to_trash
    echo "Moved ${NUM} files older than ${DAYS} days in the $(basename "${FROM_DIR}") to $(basename "${TO_DIR}")."
    exit 0
fi

while [ $# -gt 0 ]; do
    case $1 in
    -f | --from)
        FROM_DIR="${2}"
        shift 2
        ;;
    -D | --days)
        DAYS="${2}"
        shift 2
        ;;
    -t | -to_dir)
        TO_DIR="${2}"
        shift 2
        ;;
    cron)
        CRON="true"
        shift
        ;;
    downloads)
        remove_from_downloads
        exit
        ;;
    trash)
        remove_from_trash
        exit
        ;;
    -r | --remove)
        fn_remove_cron
        shift
        ;;
    -H | --hour)
        HOUR=${2}
        shift 2
        ;;
    -M | --minute)
        MINUTE=${2}
        shift 2
        ;;
    -v | --version)
        echo $version
        exit
        ;;
    -h | --help)
        usage
        exit
        ;;
    esac
done

# if OS is Linux then it must provide -t and -f
[ -z "$FROM_DIR" ] || [ -z "$DAYS" ] || [ -z "$TO_DIR" ] && echo "Please provide -t and -f" && usage

# Ubuntu has trash at /home/username/.local/share/Trash
case $FROM_DIR in
[Tt][Rr][Aa][Ss][Hh])
    NUM=$(fn_num "$HOME"/.Trash "$DAYS")
    ;;
*)
    if [ -d "$FROM_DIR" ]; then
        NUM=$(fn_num "$FROM_DIR" "$DAYS")
        # NUM=$(find "$FROM_DIR" -mtime +"$DAYS" | wc -l | xargs)
    else
        echo "No such directory: $FROM_DIR" >&2
        exit 2
    fi
    ;;
esac

# if [ "$FROM_DIR" =~ "trash" ]; then
#     NUM=$(fn_num "$HOME"/.Trash "$DAYS")
#     # NUM=$(find "$HOME"/.Trash -mtime +"$DAYS" | wc -l | xargs)
# elif [ -d "$FROM_DIR" ]; then
#     NUM=$(fn_num "$FROM_DIR" "$DAYS")
#     # NUM=$(find "$FROM_DIR" -mtime +"$DAYS" | wc -l | xargs)
# else
#     echo "No such directory: $FROM_DIR" >&2
#     exit 2
# fi

if [ "$DAYS" -lt 0 ]; then
    echo "Days must be greater then 0." >&2
    exit 1
fi

if [ ${CRON} = "true" ]; then
    if [ -n "$MINUTE" ] && [ -n "$HOUR" ]; then
        fn_cron "${DAYS}" "${MINUTE}" "${HOUR}"
    else
        echo "You must provide -H hour and -M minute." >&2
        exit 1
    fi
fi

if [ "$NUM" -gt 0 ]; then
    # matches patterns in a case-insensitive
    # shopt -s nocasematch
    case $FROM_DIR in
    [Tt][Rr][Aa][Ss][Hh])
        # remove files from Trash permanently
        remove_from_trash || {
            echo "Can't remove from the directory, exiting script!" >&2
            exit 1
        }
        exit 0
        ;;
    *)
        # move files to Trash
        move_to_trash || {
            echo "Can't move to trash, exiting script!" >&2
            exit 1
        }
        echo "Hi, Moved $NUM files older than $DAYS days in the $(basename "$FROM_DIR") to $(basename "$TO_DIR")."
        exit 0
        ;;
    esac

    # if [ "$FROM_DIR" = [Tt]rash ]; then
    #     # remove files from Trash permanently
    #     remove_from_trash || {
    #         echo "Can't remove from the directory, exiting script!" >&2
    #         exit 1
    #     }
    #     exit 0
    # else
    #     # move files to Trash
    #     move_to_trash || {
    #         echo "Can't move to trash, exiting script!" >&2
    #         exit 1
    #     }
    #     echo "Hi, Moved $NUM files older than $DAYS days in the $(basename "$FROM_DIR") to $(basename "$TO_DIR")."
    #     exit 0
    # fi
else
    echo "No files older than $DAYS days in $FROM_DIR."
    exit 0
fi

exit 0
